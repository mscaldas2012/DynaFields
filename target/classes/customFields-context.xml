<?xml  version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xmlns:aop="http://www.springframework.org/schema/aop"
           xmlns:context="http://www.springframework.org/schema/context"
           xmlns:jee="http://www.springframework.org/schema/jee"
           xmlns:lang="http://www.springframework.org/schema/lang"
           xmlns:p="http://www.springframework.org/schema/p"
           xmlns:tx="http://www.springframework.org/schema/tx"
           xmlns:util="http://www.springframework.org/schema/util"
           xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd
        http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <context:annotation-config />
    <context:component-scan base-package="com.msc.customFields.dataAccess" />

    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"
          p:location="/conf/jdbc.properties" />


    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <!--<property name="persistenceUnitName" value="customFieldsPersistenceUnit" />-->
        <property name="packagesToScan" value="com.msc.customFields.transferObjects" />
        <property name="dataSource" ref="dataSource" />
        <property name="jpaDialect">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaDialect" />
        </property>
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <property name="showSql" value="true" />
                <property name="generateDdl" value="true" />
                <property name="databasePlatform" value="org.hibernate.dialect.MySQL5Dialect" />
            </bean>
        </property>
        <property name="persistenceUnitManager">
            <bean  class="org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager">
                <property name="defaultDataSource" ref="dataSource" />
            </bean>
        </property>
    </bean>

    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager" />
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory" />
        <property name="dataSource" ref="dataSource" />
    </bean>

    <bean id="persistenceAnnotation"
          class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" />


    <bean id="customFieldDefinitionDAO" class="com.msc.customFields.dataAccess.CustomFieldDefinitionDAOImpl">
    </bean>

    <bean id="cfDefCacheLoader" class="com.msc.customFields.manager.CustomFieldDefinitionCacheLoader">
        <property name="dao" ref="customFieldDefinitionDAO"/>
    </bean>
    <bean id="cfDefCacheManager" class="com.msc.cache.CacheManager" init-method="init">
        <!-- depending which Cleanup policy you want, set one of the following -->
        <!-- setting both defaultIdleTime and DefaultTimeToLive, will automatically hook expriedCleanUpPolicy.  -->
        <!-- setting defaultIdleTime, will automatically hook  idleTimeCleanupPolicy -->
        <property name="defaultIdleTime" value="15"/>
        <property name="loaderPolicy" ref="cfDefCacheLoader"/>
        <!-- IF all values should be loaded before hand, use the initialization policy below -->
        <!--<property name="initializerPolicy" ref="fullInitializationPolicy"/>-->
    </bean>

    <bean id="customFieldDefinitionManager" class="com.msc.customFields.manager.CustomFieldDefinitionManagerImpl">
        <property name="dao" ref="customFieldDefinitionDAO"/>
        <property name="cacheManager" ref="cfDefCacheManager"/>
    </bean>


</beans>
